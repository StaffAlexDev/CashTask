import os
import re

from aiogram import Router, F
from aiogram.enums import ChatType
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from database.state_models import TransactionState

PHOTOS_DIR = os.path.join(os.path.dirname(__file__), "..", "photos")
chat = Router()


@chat.message(F.chat.type.in_(ChatType.GROUP), F.text.as_("text"))
async def handle_group_messages(message: Message, state: FSMContext):
    pattern = re.compile(r"(-?\d{1,5})\s+(—Ä–∞—Å—Ö–æ–¥|–ø—Ä–∏—Ö–æ–¥)\s*,?\s*(.+)", re.IGNORECASE)
    text = message.text
    match = pattern.match(text)
    if not match:
        await message.reply("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å!\n–®–∞–±–ª–æ–Ω:\n"
                            "—Å—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥, –æ–ø–∏—Å–∞–Ω–∏–µ")
    else:
        await message.answer("‚úÖ –®–∞–±–ª–æ–Ω –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.")
        await state.set_state(TransactionState.waiting_for_photo)


@chat.message(TransactionState.waiting_for_photo, F.photo)
async def caught_photo(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(PHOTOS_DIR, exist_ok=True)

    photo_id = message.photo[-1].file_id
    file_info = await message.bot.get_file(photo_id)
    file_path = file_info.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    save_path = os.path.join(PHOTOS_DIR, f"{photo_id}.jpg")
    await message.bot.download_file(file_path, save_path)

    await message.answer("üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await state.clear()
