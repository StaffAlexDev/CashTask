from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database.clients_pg import get_car_by_id, get_client_cars, get_client_id_by_phone_number
from database.employees_pg import get_all_employees
from database.orders_pg import add_order
from database.state_models import OrderStates, UserContext
from handlers.admins import admins
from keyboards.other import common_kb_by_role
from keyboards.paginations import get_paginated_list
from utils.validators import is_likely_license_plate, normalize_number, is_phone_number


@admins.message(F.data == "new_order")
async def order_menu(callback: CallbackQuery, user: UserContext):
    await callback.answer()
    lang = user.lang
    await callback.message.answer(lang.orders.order_types,
                                  reply_markup=common_kb_by_role("order_types", lang, user.get_role()))


@admins.message(F.data.startswith("by_"))
async def order_menu(callback: CallbackQuery, state: FSMContext, user: UserContext):
    await callback.answer()
    lang = user.lang
    choice = callback.data.split("_")[1]
    match choice:
        case "client":
            await state.set_state(OrderStates.waiting_for_client)
            await callback.message.answer(lang.orders.phone_client)
        case "car":
            await state.set_state(OrderStates.waiting_for_car)
            await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∏–ª–∏ –º–æ–¥–µ–ª—å")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@admins.callback_query(OrderStates.waiting_for_client)
async def process_car_selection_by_client(message: Message, state: FSMContext, user: UserContext):
    phone = normalize_number(message.text)
    if not is_phone_number(phone):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.")

    client_id = await get_client_id_by_phone_number(phone)
    cars = await get_client_cars(client_id)
    await state.update_data(client_cars=cars)  # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    if not cars:
        return await message.answer("–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –º–∞—à–∏–Ω, –¥–æ–±–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ.")

    # –ï—Å–ª–∏ –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º‚Ä¶
    if len(cars) == 1:
        # ‚Ä¶ –≤–∞—à –∫–æ–¥ –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã ‚Ä¶
        return

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    text, keyboard = get_paginated_list(
        get_items_func=lambda **kw: cars,
        build_button_text=lambda c: f"{c['car_brand']} {c['car_model']} ‚Äî {c['license_plate']}",
        callback_prefix="car",        # –≤ callback –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç "car_1_\<id\>"
        back_callback="cancel",       # –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ ¬´üîô –í—ã–π—Ç–∏¬ª
        page=1,
        per_page=5,
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞"
    )
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(OrderStates.waiting_for_car)


@admins.callback_query(OrderStates.waiting_for_client)
async def process_car_selection_by_client(message: Message, state: FSMContext, user: UserContext):
    phone = normalize_number(message.text)
    if is_phone_number(phone):

        client_id = await get_client_id_by_phone_number(phone)
        client_cars = await get_client_cars(client_id)

        if not client_cars:
            await message.answer("–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –º–∞—à–∏–Ω, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É –º–∞—à–∏–Ω—É")
            # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞

        elif len(client_cars) == 1:
            car_id = client_cars["car_id"]
            await state.update_data(car_id=car_id)
            await state.update_data(car=client_cars)
            await state.set_state(OrderStates.waiting_for_service)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—Ç—ã: –ú–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n"
                                 "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É —Ä–∞–±–æ—Ç. –ü—Ä–∏–º–µ—Ä:\n"
                                 "—Ä–∏—Ö—Ç–æ–≤–∫–∞(—Ü–µ–Ω–∞), ...")

        elif len(client_cars) > 1:
            text, keyboard = get_paginated_list(
                # –ø–µ—Ä–µ–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∏–∑ state
                get_items_func=lambda **kw: client_cars,
                # –∫–∞–∫ —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É
                build_button_text=lambda car: f"{car['car_brand']} {car['car_model']} ‚Äî {car['license_plate']}",
                # –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback‚Äô–æ–≤: prev_1_client_car, next_1_client_car
                callback_prefix="client_car",
                # –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π ‚Äúüîô –í—ã–π—Ç–∏‚Äù –∏–ª–∏ ‚Äú–û—Ç–º–µ–Ω–∞‚Äù
                back_callback="cancel",
                # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
                title="–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞",
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page=1,
                # —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                per_page=5
            )
            await message.answer(text, reply_markup=keyboard)


@admins.message(F.data.startswith("car_id_"))
async def order_menu(callback: CallbackQuery, state: FSMContext, user: UserContext):
    car_id: int = int(callback.data.split("_")[2])
    car = await get_car_by_id(car_id)
    await state.update_data(car_id=car_id)
    await state.update_data(car=car)
    await state.set_state(OrderStates.waiting_for_service)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—Ç—ã: –ú–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n"
                                  "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É —Ä–∞–±–æ—Ç. –ü—Ä–∏–º–µ—Ä:\n"
                                  "—Ä–∏—Ö—Ç–æ–≤–∫–∞(—Ü–µ–Ω–∞), ...")


@admins.message(OrderStates.waiting_for_service)
async def process_service_selection(
    message: Message,
    state: FSMContext,
    user: UserContext
):
    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    service = [s.strip() for s in message.text.split(",")]
    await state.update_data(service=service)

    # 1) –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ —Å —É—á—ë—Ç–æ–º —Ä–æ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    employees = await get_all_employees()

    # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state, —á—Ç–æ–±—ã –ø—Ä–∏ –ª–∏—Å—Ç–∞–Ω–∏–∏ –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫ –ë–î
    await state.update_data(employees_list=employees)

    # 3) –°—Ç—Ä–æ–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    text, keyboard = get_paginated_list(
        get_items_func=lambda **kw: employees,
        build_button_text=lambda e: f"{e['first_name']} {e['last_name']} ‚Äî —Ä–æ–ª—å: {e['role']}",
        callback_prefix="assign",       # –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data: prev_1_assign, next_1_assign
        back_callback="cancel",         # callback, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–π–¥—ë—Ç ¬´üîô –í—ã–π—Ç–∏¬ª
        title="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
        page=1,
        per_page=5                     # —Å–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    )

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await message.answer(text, reply_markup=keyboard)

    # 5) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–µ–π—Ç ‚Äî –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä –Ω—É–∂–Ω–æ –≤ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    await state.set_state(OrderStates.waiting_for_employer)


@admins.callback_query(F.data.startswith("item_") & F.data.endswith("_assign"))
async def assign_executor(callback: CallbackQuery, state: FSMContext):
    _, prefix, page_str, emp_id_str = callback.data.split("_", 3)
    emp_id = int(emp_id_str)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º state –æ–¥–∏–Ω —Ä–∞–∑
    data = await state.get_data()
    employees = data.get("employees_list", [])

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee = next(
        (e for e in employees
         if e.get("user_id") == emp_id or e.get("telegram_id") == emp_id),
        None
    )
    if not employee:
        return await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.update_data(assigned_to=emp_id, executor=employee)
    await state.set_state(OrderStates.waiting_for_order_confirmation)

    # –î–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ state
    services = data.get("service", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç—Å—ã–ª–∞–µ–º
    text = (
        f"–í—ã–±—Ä–∞–Ω: {employee['first_name']} {employee['last_name']}\n"
        f"–£—Å–ª—É–≥–∞: {', '.join(services)}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥:"
    )
    await callback.message.edit_text(
        text,
        # reply_markup=get_access_confirmation()  # –°–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å¬ª
    )


@admins.callback_query(F.data.startswith("employer_"), OrderStates.waiting_for_employer)
async def process_employer_selection(callback: CallbackQuery, state: FSMContext, user: UserContext):
    data = await state.get_data()
    car_model = data["car"]["car_model"]
    license_plate = data["car"]["license_plate"]
    service = data["service"]
    employees = callback.data.split("_")[1]
    await state.update_data(employer=employees)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_model}, {license_plate}\n"
        f"–£—Å–ª—É–≥–∞: {" ".join(service)}\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥:",
        reply_markup=common_kb_by_role("control", user.lang, user.get_role())
    )


@admins.callback_query(F.data == "confirm", OrderStates.waiting_for_order_confirmation)
async def process_confirm(callback: CallbackQuery, state: FSMContext, user: UserContext):
    data = await state.get_data()
    car_id = data["car_id"]
    description = data["service"]
    employees = data["employer"]
    await add_order(car_id=car_id, description=description, worker_id=employees)
    await callback.message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    await state.clear()


# @admins.callback_query(F.data == "back")
# async def process_back(callback: CallbackQuery, state: FSMContext, user: UserContext):
#     current_state = await state.get_state()
#
#     if current_state == OrderStates.waiting_for_service:
#         # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ
#         user_id = callback.from_user.id
#         cars = await get_client_cars(user_id)
#         text, keyboard = get_paginated_list(cars)
#
#         await callback.message.answer(text, reply_markup=keyboard)
#         await state.set_state(OrderStates.waiting_for_car)
#
#     elif current_state == OrderStates.waiting_for_order_confirmation:
#         # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
#         await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—Ç—ã: –ú–æ–∂–Ω–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n"
#                                       "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤ —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É —Ä–∞–±–æ—Ç. –ü—Ä–∏–º–µ—Ä:\n"
#                                       "—Ä–∏—Ö—Ç–æ–≤–∫–∞(—Ü–µ–Ω–∞), ...")
#         await state.set_state(OrderStates.waiting_for_service)
#
#     elif current_state == OrderStates.waiting_for_car:
#         await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –∏–ª–∏ –º–æ–¥–µ–ª—å.")
#         await state.set_state(OrderStates.waiting_for_car)
#     else:
#         await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")


@admins.callback_query(F.data == "cancel", OrderStates.waiting_for_order_confirmation)
async def process_cancel_from_confirmation(callback: CallbackQuery, state: FSMContext, user: UserContext):
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()
