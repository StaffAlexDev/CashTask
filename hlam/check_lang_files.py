import json
from pathlib import Path


def load_json(file_path):
    if not file_path.exists():
        return {}
    with open(file_path, "r", encoding="utf-8") as f:
        return json.load(f)


def save_json(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def merge_schema(schema, data, path=""):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ —Å—Ö–µ–º—ã –≤ –¥–∞–Ω–Ω—ã–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    updated = False

    for key, value in schema.items():
        full_path = f"{path}.{key}" if path else key

        if key not in data:
            print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∫–ª—é—á: {full_path}")
            data[key] = "" if not isinstance(value, dict) else {}
            updated = True

        if isinstance(value, dict):
            if not isinstance(data[key], dict):
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ç–∏–ø–æ–≤ (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ dict): {full_path}")
                data[key] = {}
                updated = True

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            if merge_schema(value, data[key], full_path):
                updated = True

    return updated


def check_and_update_language(schema_file: Path, lang_file: Path):
    schema = load_json(schema_file)
    lang = load_json(lang_file)

    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {lang_file.name}")

    if merge_schema(schema, lang):
        save_json(lang_file, lang)
        print(f"‚úÖ –§–∞–π–ª {lang_file.name} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        print(f"‚úÖ –§–∞–π–ª {lang_file.name} —É–∂–µ –ø–æ–ª–Ω—ã–π. –ù–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π.")


if __name__ == "__main__":
    schema_path = Path("language/schema.json")

    # –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
    lang_files = [
        Path("language/ru.json"),
        Path("language/en.json"),
        # –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ —Å—é–¥–∞
    ]

    if not schema_path.exists():
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω schema.json!")
        exit(1)

    for lang_file in lang_files:
        check_and_update_language(schema_path, lang_file)
