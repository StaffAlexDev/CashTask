from typing import List, Dict, Any, Callable

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.enums import Role


def build_paginated_keyboard(
        items: List[Dict[str, Any]],
        page: int = 1,
        items_per_page: int = 6,
        callback_prefix: str = "item",
        back_callback: str = "menu"
        ) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    :param items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    :param back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    paginated_items = items[start_idx:end_idx]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for item in paginated_items:
        builder.add(InlineKeyboardButton(
            text=item.get("button_text", str(item)),
            callback_data=f"{callback_prefix}_{page}_{item['id']}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    navigation_buttons = []

    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"prev_{page}_{callback_prefix}"
        ))

    if end_idx < len(items):
        navigation_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"next_{page}_{callback_prefix}"
        ))

    if navigation_buttons:
        builder.row(*navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(InlineKeyboardButton(
        text="üîô –í—ã–π—Ç–∏",
        callback_data=back_callback
    ))

    builder.adjust(1, repeat=True)
    return builder.as_markup()


def get_paginated_list(
    config: Dict[str, Any],
    page: int = 1,
    per_page: int = 6
) -> tuple[str, InlineKeyboardMarkup]:
    # 1. –î–æ—Å—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    get_items_func: Callable = config["get_items_func"]
    filters: dict = config.get("filters", {})

    # 2. –í—ã–∑—ã–≤–∞–µ–º –µ—ë —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    items = get_items_func(**filters)

    # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    formatted_items = [
        {
            "id": item.get("id")
                  or item.get("client_id")
                  or item.get("car_id")
                  or item.get("order_id")
                  or item.get("task_id"),
            "button_text": config["build_button_text"](item),
            "raw_data": item
        }
        for item in items
    ]

    # 4. –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_paginated_keyboard(
        items=formatted_items,
        page=page,
        items_per_page=per_page,
        callback_prefix=config["key"],      # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω–∏—Ç–µ key –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        back_callback=config["back_callback"]
    )

    text = f"{config['title']} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):"
    return text, keyboard


def action_with_item(item_type: str, item_id: int, page: int, role: Role) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=f"item_{item_type}_{item_id}_edit"
        ),
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"item_{item_type}_{item_id}_delete"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨Ö –ù–∞–∑–∞–¥",
            callback_data=f"back_to_list_{item_type}_{page}"
        )
    )
    if role == Role.SUPERADMIN:
        builder.row(
            InlineKeyboardButton(
                text="‚ôª –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                callback_data=f"item_{item_type}_{item_id}_restore"
            )
        )

    return builder.as_markup()
